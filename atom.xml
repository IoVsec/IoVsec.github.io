<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🔰FLY &#39;s blog🔰</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-24T07:24:00.690Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>🔰FLY🔰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CAN总线协议</title>
    <link href="http://example.com/2024/10/23/CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2024/10/23/CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-10-23T08:00:21.614Z</published>
    <updated>2024-10-24T07:24:00.690Z</updated>
    
    <content type="html"><![CDATA[<p class='item-img' data-src='https://s21.ax1x.com/2024/10/23/pAdg3h4.png'><img src="https://s21.ax1x.com/2024/10/23/pAdg3h4.png"></p><h3 id="车载总线协议发展的前提"><a href="#车载总线协议发展的前提" class="headerlink" title="车载总线协议发展的前提"></a>车载总线协议发展的前提</h3><p>在汽车发展的早期，汽车的ECU采用点对点的通信方式，也就是说在每两个ECU之间就会有一条用于数据传输的线缆。随着汽车的功能越来越丰富，用于实现这些功能和服务的车载传感器和ECU的数量也在持续上升，现在一辆汽车的ECU可能高达几百个。那么如果仍然采用早期的方案，汽车的线缆可能会呈现指数级的增长。这不仅导致汽车的重量增加，还使得线缆的难以维护和修理。</p><p>于是在这种背景下汽车总线的概念就应运而生，目前主流的总线协议有CAN，FlexRay，LIN以及MOST这4种总线协议，未来车载总线将往以太网方向发展。</p><h3 id="CAN总线概述"><a href="#CAN总线概述" class="headerlink" title="CAN总线概述"></a>CAN总线概述</h3><p>CAN总线是一个古老的总线协议，最早可追溯到上个世纪的80年代，由德国的Bosch公司研发的。但是CAN总线仍然是现在汽车内部网络广泛使用的通信总线，由两条双绞线构成，一条为CAN_H，另外一条为CAN_L。在双绞线的两端各有120欧的电阻，用于匹配总线阻抗，提高数据通信的抗干扰性及可靠行。双绞线周围分布的是各个ECU节点。</p><p>一般在汽车中转速管理和制动用高速总线进行，而对于门锁和空调控制之类的非关键通信，则通过中低速总线进行。</p><p>CAN总线采用差分信号，当信号输入的时候，CAN提升一条线的电平，并在另一条线上降低同样的电平。传感器与ECU中有一个收发器，该收发器确保两种信号均被触发，假如没有被同时触发，收发器将该数据视为噪声丢掉。</p><p class='item-img' data-src='https://s21.ax1x.com/2024/10/24/pAwpWNT.md.jpg'><img src="https://s21.ax1x.com/2024/10/24/pAwpWNT.md.jpg"></p><p>CAN总线类似于局域网通信的ARP协议，在BUS干线上采用广播的形式传输信息，也就是说在同一条干线上的所有节点都会接收到来自干线的所有报文数据包。这就好像教室里老师给学生上课一样。</p><p>当多个节点都要发送数据的时候就会存在冲突，CAN总线必须决定那个节点可以发送，哪些节点必须等待。总裁是CAN总线的协议的重要特性，总线上每一个节点都有唯一的ID，ID大小决定发送的优先级，ID小优先发送。</p><p>仲裁机制本质上是借助显性覆盖隐性的机制，CAN总线的差分电平分为显性电平和隐性电平。显性电平的逻辑是0，隐性电平的逻辑是1。在同一位时间，一个节点发送显性电平，另外一个节点发送隐性电平，则总线电平为显性电平。(0&amp;1&#x3D;0)这就是CAN总线仲裁的基础。</p><h3 id="CAN帧结构"><a href="#CAN帧结构" class="headerlink" title="CAN帧结构"></a>CAN帧结构</h3><p>CAN具有5种类型的帧 ———-&gt; 数据帧，远程帧，错误帧，过载帧和帧间隔，其中错误帧和过载帧属于容错处理帧。</p><p class='item-img' data-src='https://s21.ax1x.com/2024/10/24/pAwp534.png'><img src="https://s21.ax1x.com/2024/10/24/pAwp534.png" alt="fe6a4a3095f24b61be0d7d1cea1d76a9"></p><p>数据帧:    用于发送单元向接收单元传输数据</p><p>远程帧:    遥控帧，用于请求其他节点发出与本远程帧具有相同的ID的数据帧</p><p>错误帧:    用于在检测错误时向其他单元通知错误</p><p>过载帧:    用于接收节点向总线上其他节点报告自身接收能力达到极限</p><p>帧间隔:    用于数据帧或远程帧和它们之间的帧分离开，但过载帧和错误帧前面不会插入帧间隔</p><h4 id="1-数据帧"><a href="#1-数据帧" class="headerlink" title="(1)数据帧"></a>(1)数据帧</h4><p>1)帧起始: 1位，代表帧的开始，是一个显性位(0)</p><p>2)仲裁段: 总共12位，前11位是帧ID，后一位是远程发送请求(RTR)，标志本征的优先级，其中有一个ID码。仲裁段中的ID码越小，帧数据的优先级越高，仲裁段就会在此阶段进行。如果出现多个仲裁段相同的报文，则会错误，因为后续数据段中会出现显性和隐性不一致的情况。CAN控制器会判断发出的数据和接收的数据是否一致。</p><p>3)控制段: 由6位组成。控制段第一位为IDE(标识扩展位，该位是显性，用来指定标准帧)，IDE的下一位为零保留位，CAN协议将其定义为显性位，控制段其余4位为数据长度码(DLC)，代表发送数据的长度(0-8)。</p><p>4)扩展帧: 帧ID分为两段，一共29位，可以容纳更多的ID。首先是SRR(替代远程请求)位，它在扩展帧中恒为隐性1，扩展帧的隐性SRR位正好对应标准帧的显性RTR位，这就保证了在前11位ID相同的情况下，标准数据帧的优先级高于扩展数据帧。其次是IDE位，它在扩展帧种恒为隐性位1.而在标准帧中，IDE位位于控制段，且恒为显性0。扩展帧IDE位和标准帧IDE位位置对应，这就保证了在前11位ID相同的情况下，标准遥控帧的优先级一定高于扩展遥控帧。</p><p>5)数据段: 本征数据所需要传达的信息，一帧信号可以传送0-8位数据，每字节8位。</p><p>6)CRC段: 用于校验完整性，为了防止信号由于某种原因被修改，CAN数据链路层上加入CRC校验</p><p>7)ACK段: 用于表明信号是否被正确接收，如果接收到正常的节点，在ACK第一位会发出一个显性位。</p><h4 id="2-远程帧"><a href="#2-远程帧" class="headerlink" title="(2)远程帧"></a>(2)远程帧</h4><p>类似于数据帧，但有两个重要区别:</p><p>    被显式标记为远程帧(仲裁段中的RTR位为隐性)</p><p>    没有数据段</p><p>数据帧是由某个功能source发起，发送给目标dst的，而远程帧是主动由目标发起，向源请求数据的。远程帧的结构和数据帧类似，但是远程帧没有数据段，只有一个头，并且由于RTR位为1，其优先级会低于数据帧。远程帧的预期目的是远程传输响应的数据帧。</p><p>注意事项: DLC必须设置成预期响应的报文长度，否则仲裁将不起作用。</p><h4 id="3-错误帧"><a href="#3-错误帧" class="headerlink" title="(3)错误帧"></a>(3)错误帧</h4><p>错误帧是一种特殊报文，它在一个节点检测到故障时被传送，并将导致所有其他节点也检测到故障，这些节点也发送错误帧，然后传送节点将自动尝试重传报文。</p><p>错误帧由错误标志(Error Flag)和错误界定符(Error Delimiter)组成。错误帧由位错误，填充错误，CRC错误，格式错误，ACK错误这5种类型，多种错误可能同时发生。</p><p>错误标志: 当接收节点发现总线上的报文错误，将自动发出活动错误标志，这是6个连续的显性位。其他节点在检测到活动错误标志后，发送错误认可标志，由6个连续的隐性位组成。由于各个接收节点发现错误的时间可能不同，所以总线上实际的错误标志可能由6-12个显性位组成。</p><p>错误标志分为主动错误标志和被动错误标志。主动错误标志由6个显性位组成，它违反了位填充规则，可以解释为一个节点在发现错误后，一直发送错误帧，干扰其他节点，让其他节点都知道发生错误。被动错误由6个隐性位组成，由处于被动错误状态的节点发出。</p><p>其次是错误界定符。错误界定符由8个隐性位构成。在错误标志发生后，每一个CAN节点监视总线，直至检测到一个显性电平的跳变，这表示所有的节点已经完成了错误标志的发送，并开始发送8个隐性电平的界定符。</p><h4 id="4-过载帧"><a href="#4-过载帧" class="headerlink" title="(4)过载帧"></a>(4)过载帧</h4><p>我们仅仅因为知识的完整性会提及过载帧。在格式方面过载帧与错误帧的定位是十分的相视的，但是过载帧并不常用到。因为当今CAN控制器会非常智能化避免使用使用过载帧。</p><p>过载帧包括过载标志(Overload Flag)和过载定界符(Overload Delimiter)。对于过载帧的结构可以这样理解：当接收节点达到极限时，就会将过载帧发送到总线上。显然，过载标志的6个连续显性位会屏蔽掉总线上其他节点的发送。这样在接收节点发送过过载帧期间，其他节点就不能成功发送报文了。这就相当于把其他节点的发送推迟了，接收节点在其发送过过载帧的这段时间就可以”休息”。</p><p>    通常有3种情况会引起过载帧</p><p>    (1) 接收节点自身原因。接收节点由于某种原因需要延迟接收下一个数据帧或者遥控帧</p><p>    (2) 在帧间隔的间歇段的第一位和第二位检测到一个显性位(正常的间隔段都是隐性位)。帧间隔的间隔段本应是3个连续的隐性位，如果接收节点在间隔段检测到显性位，那么就意味着此时有报文发向接收节点；但这个时候是不应该有报文发来的，于是接收节点发送过载帧。</p><p>    (3) CAN节点在错误界定符或过载界定符的第八位(最后一位)接收到一个显性位0，节点会发送一个过载帧，且错误计数器不会增加。接收节点在错误界定符和过载界定符的最后一位听到显性位，这也意味着有报文向接收节点，但这个时候是不应该有报文发来的，于是接收节点发送过载帧。</p><h4 id="5-帧间隔"><a href="#5-帧间隔" class="headerlink" title="(5)帧间隔"></a>(5)帧间隔</h4><p>帧间隔又称为间断，至少由3个隐性构成，用于将数据帧或远程帧和它们之前的帧分开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;item-img&#39; data-src=&#39;https://s21.ax1x.com/2024/10/23/pAdg3h4.png&#39;&gt;&lt;img src=&quot;https://s21.ax1x.com/2024/10/23/pAdg3h4.png&quot;&gt;&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    <category term="车联网安全" scheme="http://example.com/categories/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="CAN注入" scheme="http://example.com/tags/CAN%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/10/23/hello-world/"/>
    <id>http://example.com/2024/10/23/hello-world/</id>
    <published>2024-10-23T01:47:02.641Z</published>
    <updated>2024-10-23T01:47:02.641Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
